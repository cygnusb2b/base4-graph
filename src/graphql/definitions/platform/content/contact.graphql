type PlatformContentContact implements PlatformContent {
  # fields required by the PlatfomContent GraphQL interface
  id: Int! @value(localField: "_id")
  type(input: PlatformContentTypeInput = {}): String! @inflect
  name(input: PlatformContentMutationInput = {}): String @mutatedValue
  shortName: String @value(fallbackField: "name")
  fullName: String
  hash: String
  created: Date
  updated: Date
  touched: Date
  published: Date
  unpublished: Date
  createdBy: PlatformSecurityUser @refOne(model: "platform.User")
  updatedBy: PlatformSecurityUser @refOne(model: "platform.User")
  status: Int
  teaser(input: PlatformContentMutationInput = {}): String @mutatedValue
  body(input: PlatformContentMutationInput = {}): String @mutatedValue
  notes: String
  taxonomy(input: RelatedPlatformTaxonomyInput = {}): PlatformTaxonomyConnection! @refMany(model: "platform.Taxonomy")
  relatedTo(input: RelatedPlatformContentInput = {}): PlatformContentConnection! @refMany(model: "platform.Content")
  primaryImage: PlatformAssetImage @refOne(model: "platform.Asset", criteria: { type: "Image" })
  images(input: RelatedPlatformAssetImagesInput = {}): PlatformAssetImageConnection! @refMany(model: "platform.Asset", criteria: { type: "Image" })
  schedules: PlatformContentSchedules! @passThru
  primarySite(input: ReferenceStatusInput = {}): WebsiteProductSite @refOne(model: "platform.Product", localField: "mutations.Website.primarySite", criteria: { type: "Site" })
  primarySection(input: ReferenceStatusInput = {}): WebsiteSection @refOne(model: "website.Section", localField: "mutations.Website.primarySection")
  seoTitle: String @value(localField: "mutations.Website.seoTitle", fallbackField: "name")
  alias: String @value(localField: "mutations.Website.alias")
  redirects: [String]! @arrayValue(localField: "mutations.Website.redirects")
  slug: String @value(localField: "mutations.Website.slug")
  createdDate(input: MomentFormat = {}): String @momentFormat(localField: "created")
  updatedDate(input: MomentFormat = {}): String @momentFormat(localField: "updated")
  publishedDate(input: MomentFormat = {}): String @momentFormat(localField: "published")
  unpublishedDate(input: MomentFormat = {}): String @momentFormat(localField: "unpublished")
  canonicalPath(input: PlatformContentCanonicalPathInput = {}): String! @contentPath
  redirectTo: String @contentRedirectTo
  ownedRelatedTo(input: PlatformContentRelatedInput = {}): PlatformContentConnection! @relatedContent(type: owned)
  inverseRelatedTo(input: PlatformContentRelatedInput = {}): PlatformContentConnection! @relatedContent(type: inverse)
  combinedRelatedTo(input: PlatformContentRelatedInput = {}): PlatformContentConnection! @relatedContent(type: combined)
  sectionRelatedTo(input: PlatformContentRelatedInput = {}): PlatformContentConnection! @relatedContent(type: primarySection)
  scheduledWebsiteSections(input: RelatedWebsiteSectionsInput = {}): WebsiteSectionConnection! @scheduledSections(type: Website)

  # fields directly on platform.model::Content\Contact
  socialLinks: [PlatformEntityStubSocial]! @arrayValue

  # fields from platform.trait::Content\Contactable
  phone: String
  tollfree: String
  fax: String
  website: String
  email: String
  firstName: String
  lastName: String
  company: PlatformContentCompany
  title: String
  mobile: String
  publicEmail: String

  # fields from platform.trait::Content\Addressable
  address1: String
  address2: String
  city: String
  state: String
  zip: String
  country: String
  location: PlatformContentStubLocation

  # GraphQL-only fields.
  # @todo Implement.
  # @see Cygnus\ApplicationBundle\Icarus\BlockHandler\ContentAuthorQuery
  ownedContent(input: PlatformContentContactOwnedContactInput = {}): PlatformContentConnection!
}

enum PlatformContentContactAuthorType {
  author
  contributor
  photographer
}

type PlatformContentContactConnection @paginated {
  totalCount: Int!
  edges: [PlatformContentContactEdge]!
  pageInfo: PageInfo!
}

type PlatformContentContactEdge {
  node: PlatformContentContact!
  cursor: Cursor!
}

# @todo Implement.
input PlatformContentContactOwnedContactInput {
  type: PlatformContentContactAuthorType # a null value means all types
  excludeContentTypes: [PlatformContentType]! = []
  includeContentTypes: [PlatformContentType]! = []
  requiresImage: Boolean = false
  sort: PlatformContentSortInput = { field: published, order: desc }
  pagination: PaginationInput = {}
}
